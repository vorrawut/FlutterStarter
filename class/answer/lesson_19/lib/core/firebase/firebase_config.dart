import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_analytics/firebase_analytics.dart';
import 'package:firebase_crashlytics/firebase_crashlytics.dart';
import 'package:flutter/foundation.dart';

class FirebaseConfig {
  static bool _initialized = false;
  
  static Future<void> initialize() async {
    if (_initialized) return;

    // Initialize Firebase with options (would be generated by FlutterFire CLI)
    await Firebase.initializeApp(
      // In a real app, you would include firebase_options.dart here
      // options: DefaultFirebaseOptions.currentPlatform,
    );
    
    // Configure services
    await _configureFirebaseServices();
    
    // Setup error tracking
    await _setupErrorTracking();
    
    // Configure emulators for development
    await _configureEmulators();
    
    _initialized = true;
  }
  
  static Future<void> _configureFirebaseServices() async {
    // Enable Firestore offline persistence
    FirebaseFirestore.instance.settings = const Settings(
      persistenceEnabled: true,
      cacheSizeBytes: Settings.CACHE_SIZE_UNLIMITED,
    );
    
    // Configure Auth settings
    await FirebaseAuth.instance.setSettings(
      appVerificationDisabledForTesting: kDebugMode,
      userAccessGroup: null,
    );
    
    // Enable Analytics
    await FirebaseAnalytics.instance.setAnalyticsCollectionEnabled(true);
  }
  
  static Future<void> _setupErrorTracking() async {
    // Enable Crashlytics
    await FirebaseCrashlytics.instance.setCrashlyticsCollectionEnabled(true);
    
    // Catch Flutter framework errors
    FlutterError.onError = (errorDetails) {
      FirebaseCrashlytics.instance.recordFlutterFatalError(errorDetails);
    };
    
    // Catch async errors
    PlatformDispatcher.instance.onError = (error, stack) {
      FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);
      return true;
    };
  }
  
  static Future<void> _configureEmulators() async {
    // Only use emulators in debug mode
    if (kDebugMode) {
      try {
        // Connect to Firestore emulator
        FirebaseFirestore.instance.useFirestoreEmulator('localhost', 8080);
        
        // Connect to Auth emulator
        await FirebaseAuth.instance.useAuthEmulator('localhost', 9099);
        
        print('🔧 Connected to Firebase emulators');
      } catch (e) {
        print('⚠️ Failed to connect to emulators: $e');
        // Continue without emulators
      }
    }
  }
  
  // Firebase service getters
  static FirebaseAuth get auth => FirebaseAuth.instance;
  static FirebaseFirestore get firestore => FirebaseFirestore.instance;
  static FirebaseAnalytics get analytics => FirebaseAnalytics.instance;
  static FirebaseCrashlytics get crashlytics => FirebaseCrashlytics.instance;
  
  // Health check
  static bool get isInitialized => _initialized;
  
  // Connection status
  static Future<bool> checkConnection() async {
    try {
      // Try to perform a simple Firestore operation
      await firestore.doc('health/check').get();
      return true;
    } catch (e) {
      return false;
    }
  }
}
